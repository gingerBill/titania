module out
	import
		builtin,
		this := out

	const
		BUF_SIZE = 16 xor 2

	type
		Foo = record
			a, b: int
			c: [BUF_SIZE]char
			nested: record
				a, b: real
			end
		end

	var
		w: int

	proc write_int(x, n: int)
		var
			i: int
			a: [BUF_SIZE]char
	begin
		i := 0
		if x < 0 then
			x := -x
		end

		repeat
			a[i] := builtin.chr(x % 10 + ord("0"))
			x := x / 10
			inc(i)
		until x = 0

		repeat
			dec(n)
		until n <= i

		repeat
			dec(i)
		until i = 0
	end

	proc test()
		var
			a:   set
			ptr: ^int
			x:   int
	begin
		a := {1..10, 12, 23}
		ptr := nil
		ptr := addr(x)
	end

begin
	test()
end