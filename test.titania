module out
import
	builtin,
	this := out

const
	BUF_SIZE = 16 xor 2

type
	Foo = record
		a, b: int
		c: [BUF_SIZE]char
		using nested: record
			x, y: real
		end
	end

var
	w: int;
	foo: Foo;

proc write_int(x, n: int)
	var
		i: int
		a: [BUF_SIZE]char
begin
	i := 0
	if x < 0 then
		x := -x
	end

	repeat
		a[i] := builtin.chr(x % 10 + ord("0"))
		x := x / 10
		inc(i)
	until x = 0

	repeat
		dec(n)
	until n <= i

	repeat
		dec(i)
	until i = 0
end

proc test()
	var
		a:   set
		ptr: ^int
		i:   int
begin
	a := {1..10, 12, 23}
	ptr := nil
	ptr := addr(i)

	for i := 0 to 10 by 2 then
		foo.x := 123.4
	end
end

begin

	test()
end